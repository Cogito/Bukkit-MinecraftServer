diff --git a/net/minecraft/server/GuiLogFormatter.java b/net/minecraft/server/GuiLogFormatter.java
index 6a3ba8b..4294262 100644
--- a/net/minecraft/server/GuiLogFormatter.java
+++ b/net/minecraft/server/GuiLogFormatter.java
@@ -18,7 +18,7 @@ class GuiLogFormatter extends Formatter {
 
     GuiLogFormatter(GuiLogOutputHandler guilogoutputhandler) {
         a = guilogoutputhandler;
-        super();
+        // super();
     }
 
     public String format(LogRecord logrecord) {
diff --git a/net/minecraft/server/GuiStatsListener.java b/net/minecraft/server/GuiStatsListener.java
index b77e57a..99615d3 100644
--- a/net/minecraft/server/GuiStatsListener.java
+++ b/net/minecraft/server/GuiStatsListener.java
@@ -18,7 +18,7 @@ class GuiStatsListener
 
     GuiStatsListener(GuiStatsComponent guistatscomponent) {
         a = guistatscomponent;
-        super();
+        // super();
     }
 
     public void actionPerformed(ActionEvent actionevent) {
diff --git a/net/minecraft/server/MinecartTrackLogic.java b/net/minecraft/server/MinecartTrackLogic.java
index b76547a..7a4c0ac 100644
--- a/net/minecraft/server/MinecartTrackLogic.java
+++ b/net/minecraft/server/MinecartTrackLogic.java
@@ -23,7 +23,7 @@ class MinecartTrackLogic {
 
     public MinecartTrackLogic(BlockMinecartTrack blockminecarttrack, World world, int i, int j, int k) {
         a = blockminecarttrack;
-        super();
+        // super();
         g = new ArrayList();
         b = world;
         c = i;
diff --git a/net/minecraft/server/NetworkAcceptThread.java b/net/minecraft/server/NetworkAcceptThread.java
index b5e1be0..e596f0c 100644
--- a/net/minecraft/server/NetworkAcceptThread.java
+++ b/net/minecraft/server/NetworkAcceptThread.java
@@ -19,7 +19,7 @@ class NetworkAcceptThread extends Thread {
     NetworkAcceptThread(NetworkListenThread networklistenthread, String s, MinecraftServer minecraftserver) {
         b = networklistenthread;
         a = minecraftserver;
-        super(s);
+        // super(s);
     }
 
     public void run() {
diff --git a/net/minecraft/server/NetworkMasterThread.java b/net/minecraft/server/NetworkMasterThread.java
index 62a097d..ce899bb 100644
--- a/net/minecraft/server/NetworkMasterThread.java
+++ b/net/minecraft/server/NetworkMasterThread.java
@@ -15,7 +15,7 @@ class NetworkMasterThread extends Thread {
 
     NetworkMasterThread(NetworkManager networkmanager) {
         a = networkmanager;
-        super();
+        // super();
     }
 
     public void run() {
diff --git a/net/minecraft/server/NetworkReaderThread.java b/net/minecraft/server/NetworkReaderThread.java
index d9f8dd3..e762404 100644
--- a/net/minecraft/server/NetworkReaderThread.java
+++ b/net/minecraft/server/NetworkReaderThread.java
@@ -14,24 +14,20 @@ class NetworkReaderThread extends Thread {
     final NetworkManager a; /* synthetic field */
 
     NetworkReaderThread(NetworkManager networkmanager, String s) {
-        a = networkmanager;
         super(s);
+        a = networkmanager;
     }
 
     public void run() {
         synchronized(NetworkManager.a) {
             NetworkManager.b++;
         }
-        for(; NetworkManager.a(a) && !NetworkManager.b(a); NetworkManager.c(a));
-        synchronized(NetworkManager.a) {
-            NetworkManager.b--;
-        }
-        break MISSING_BLOCK_LABEL_115;
-        Exception exception2;
-        exception2;
-        synchronized(NetworkManager.a) {
-            NetworkManager.b--;
+        try {
+            for(; NetworkManager.a(a) && !NetworkManager.b(a); NetworkManager.c(a));
+        } finally {
+            synchronized(NetworkManager.a) {
+                NetworkManager.b--;
+            }
         }
-        throw exception2;
     }
 }
diff --git a/net/minecraft/server/NetworkWriterThread.java b/net/minecraft/server/NetworkWriterThread.java
index a40276c..fda8d91 100644
--- a/net/minecraft/server/NetworkWriterThread.java
+++ b/net/minecraft/server/NetworkWriterThread.java
@@ -14,24 +14,20 @@ class NetworkWriterThread extends Thread {
     final NetworkManager a; /* synthetic field */
 
     NetworkWriterThread(NetworkManager networkmanager, String s) {
-        a = networkmanager;
         super(s);
+        a = networkmanager;
     }
 
     public void run() {
         synchronized(NetworkManager.a) {
             NetworkManager.c++;
         }
-        for(; NetworkManager.a(a); NetworkManager.d(a));
-        synchronized(NetworkManager.a) {
-            NetworkManager.c--;
-        }
-        break MISSING_BLOCK_LABEL_105;
-        Exception exception2;
-        exception2;
-        synchronized(NetworkManager.a) {
-            NetworkManager.c--;
+        try {
+            for(; NetworkManager.a(a); NetworkManager.d(a));
+        } finally {
+            synchronized(NetworkManager.a) {
+                NetworkManager.c--;
+            }
         }
-        throw exception2;
     }
 }
diff --git a/net/minecraft/server/PlayerInstance.java b/net/minecraft/server/PlayerInstance.java
index a7b03bf..3e41aa3 100644
--- a/net/minecraft/server/PlayerInstance.java
+++ b/net/minecraft/server/PlayerInstance.java
@@ -31,7 +31,7 @@ class PlayerInstance {
 
     public PlayerInstance(PlayerManager playermanager, int i1, int j1) {
         a = playermanager;
-        super();
+        // super();
         b = new ArrayList();
         f = new short[10];
         g = 0;
diff --git a/net/minecraft/server/ServerGuiCommandListener.java b/net/minecraft/server/ServerGuiCommandListener.java
index 689802c..23788d7 100644
--- a/net/minecraft/server/ServerGuiCommandListener.java
+++ b/net/minecraft/server/ServerGuiCommandListener.java
@@ -21,7 +21,7 @@ class ServerGuiCommandListener
     ServerGuiCommandListener(ServerGUI servergui, JTextField jtextfield) {
         b = servergui;
         a = jtextfield;
-        super();
+        // super();
     }
 
     public void actionPerformed(ActionEvent actionevent) {
diff --git a/net/minecraft/server/ServerGuiFocusAdapter.java b/net/minecraft/server/ServerGuiFocusAdapter.java
index b977d1b..1735e1a 100644
--- a/net/minecraft/server/ServerGuiFocusAdapter.java
+++ b/net/minecraft/server/ServerGuiFocusAdapter.java
@@ -17,7 +17,7 @@ class ServerGuiFocusAdapter extends FocusAdapter {
 
     ServerGuiFocusAdapter(ServerGUI servergui) {
         a = servergui;
-        super();
+        // super();
     }
 
     public void focusGained(FocusEvent focusevent) {
diff --git a/net/minecraft/server/ServerWindowAdapter.java b/net/minecraft/server/ServerWindowAdapter.java
index f19ac5f..55e912b 100644
--- a/net/minecraft/server/ServerWindowAdapter.java
+++ b/net/minecraft/server/ServerWindowAdapter.java
@@ -17,7 +17,7 @@ final class ServerWindowAdapter extends WindowAdapter {
 
     ServerWindowAdapter(MinecraftServer minecraftserver) {
         a = minecraftserver;
-        super();
+        // super();
     }
 
     public void windowClosing(WindowEvent windowevent) {
diff --git a/net/minecraft/server/SpawnerAnimals.java b/net/minecraft/server/SpawnerAnimals.java
index 1c29aa3..6aa52e1 100644
--- a/net/minecraft/server/SpawnerAnimals.java
+++ b/net/minecraft/server/SpawnerAnimals.java
@@ -28,127 +28,100 @@ public final class SpawnerAnimals {
     }
 
     public static final int a(World world) {
-        int j;
-        int k;
         a.clear();
-        for(int i = 0; i < world.d.size(); i++) {
-            EntityPlayer entityplayer = (EntityPlayer)world.d.get(i);
-            int l = MathHelper.b(entityplayer.p / 16D);
-            int i1 = MathHelper.b(entityplayer.r / 16D);
+
+        for(int i = 0; i < world.k.size(); ++i) {
+            EntityPlayer entityplayer = (EntityPlayer)world.k.get(i);
+            int l = MathHelper.b(entityplayer.l / 16.0D);
+            int i1 = MathHelper.b(entityplayer.n / 16.0D);
             byte byte0 = 8;
-            for(int j1 = -byte0; j1 <= byte0; j1++) {
-                for(int k1 = -byte0; k1 <= byte0; k1++)
-                    a.add(new ChunkCoordIntPair(j1 + l, k1 + i1));
 
+            for(int j = -byte0; j <= byte0; ++j) {
+                for(int k = -byte0; k <= byte0; ++k) {
+                    a.add(new ChunkCoordIntPair(j + l, k + i1));
+                }
             }
-
         }
 
-        j = 0;
-        k = 0;
-_L10:
-        if(k >= EnumCreatureType.values().length) goto _L2; else goto _L1
-_L1:
-        EnumCreatureType enumcreaturetype;
-        Iterator iterator;
-        enumcreaturetype = EnumCreatureType.values()[k];
-        if(world.a(enumcreaturetype.c) > (enumcreaturetype.d * a.size()) / 256)
-            continue; /* Loop/switch isn't completed */
-        iterator = a.iterator();
-_L4:
-        Class aclass[];
-        int l1;
-        int i2;
-        int j2;
-        int k2;
-        int l2;
-        int i3;
-        do {
-            ChunkCoordIntPair chunkcoordintpair;
-            do {
-                do {
-                    if(!iterator.hasNext())
-                        continue; /* Loop/switch isn't completed */
-                    chunkcoordintpair = (ChunkCoordIntPair)iterator.next();
-                } while(world.l.nextInt(50) != 0);
-                MobSpawnerBase mobspawnerbase = world.a().a(chunkcoordintpair);
-                aclass = mobspawnerbase.a(enumcreaturetype);
-            } while(aclass == null || aclass.length == 0);
-            l1 = world.l.nextInt(aclass.length);
-            ChunkPosition chunkposition = a(world, chunkcoordintpair.a * 16, chunkcoordintpair.b * 16);
-            i2 = chunkposition.a;
-            j2 = chunkposition.b;
-            k2 = chunkposition.c;
-        } while(world.d(i2, j2, k2) || world.c(i2, j2, k2) != Material.a);
-        l2 = 0;
-        i3 = 0;
-_L9:
-        if(i3 >= 3) goto _L4; else goto _L3
-_L3:
-        int j3;
-        int k3;
-        int l3;
-        byte byte1;
-        int i4;
-        j3 = i2;
-        k3 = j2;
-        l3 = k2;
-        byte1 = 6;
-        i4 = 0;
-_L8:
-        if(i4 >= 4) goto _L6; else goto _L5
-_L5:
-        EntityLiving entityliving;
-        j3 += world.l.nextInt(byte1) - world.l.nextInt(byte1);
-        k3 += world.l.nextInt(1) - world.l.nextInt(1);
-        l3 += world.l.nextInt(byte1) - world.l.nextInt(byte1);
-        if(!world.d(j3, k3 - 1, l3) || world.d(j3, k3, l3) || world.c(j3, k3, l3).d() || world.d(j3, k3 + 1, l3))
-            continue; /* Loop/switch isn't completed */
-        float f = (float)j3 + 0.5F;
-        float f1 = k3;
-        float f2 = (float)l3 + 0.5F;
-        if(world.a(f, f1, f2, 24D) != null)
-            continue; /* Loop/switch isn't completed */
-        float f3 = f - (float)world.m;
-        float f4 = f1 - (float)world.n;
-        float f5 = f2 - (float)world.o;
-        float f6 = f3 * f3 + f4 * f4 + f5 * f5;
-        if(f6 < 576F)
-            continue; /* Loop/switch isn't completed */
-        try {
-            entityliving = (EntityLiving)aclass[l1].getConstructor(new Class[] {
-                net.minecraft.server.World.class
-            }).newInstance(new Object[] {
-                world
-            });
-        }
-        catch(Exception exception) {
-            exception.printStackTrace();
-            return j;
-        }
-        entityliving.c(f, f1, f2, world.l.nextFloat() * 360F, 0.0F);
-        if(!entityliving.a())
-            break; /* Loop/switch isn't completed */
-        l2++;
-        world.a(entityliving);
-        if((entityliving instanceof EntitySpider) && world.l.nextInt(100) == 0) {
-            EntitySkeleton entityskeleton = new EntitySkeleton(world);
-            entityskeleton.c(f, f1, f2, entityliving.v, 0.0F);
-            world.a(entityskeleton);
-            entityskeleton.e(entityliving);
+        int i = 0;
+
+        for(int k = 0; k < EnumCreatureType.values().length; ++k) {
+            EnumCreatureType enumcreaturetype = EnumCreatureType.values()[k];
+            if(world.a(enumcreaturetype.c) <= enumcreaturetype.d * a.size() / 256) {
+                Iterator iterator = a.iterator();
+
+                label90:
+                while(iterator.hasNext()) {
+                    ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair)iterator.next();
+                    if(world.m.nextInt(50) == 0) {
+                        MobSpawnerBase mobspawnerbase = world.a().a(chunkcoordintpair);
+                        Class[] aclass = mobspawnerbase.a(enumcreaturetype);
+                        if(aclass != null && aclass.length != 0) {
+                            int l1 = world.m.nextInt(aclass.length);
+                            ChunkPosition chunkposition = a(world, chunkcoordintpair.a * 16, chunkcoordintpair.b * 16);
+                            int i1 = chunkposition.a;
+                            int j1 = chunkposition.b;
+                            int k1 = chunkposition.c;
+                            if(!world.d(i1, j1, k1) && world.c(i1, j1, k1) == Material.a) {
+                                int j = 0;
+
+                                for(int l2 = 0; l2 < 3; ++l2) {
+                                    int i2 = i1;
+                                    int j2 = j1;
+                                    int k2 = k1;
+                                    byte byte0 = 6;
+
+                                    for(int l3 = 0; l3 < 4; ++l3) {
+                                        i2 += world.m.nextInt(byte0) - world.m.nextInt(byte0);
+                                        j2 += world.m.nextInt(1) - world.m.nextInt(1);
+                                        k2 += world.m.nextInt(byte0) - world.m.nextInt(byte0);
+                                        if(world.d(i2, j2 - 1, k2) && !world.d(i2, j2, k2) && !world.c(i2, j2, k2).d() && !world.d(i2, j2 + 1, k2)) {
+                                            float f = (float)i2 + 0.5F;
+                                            float f1 = (float)j2;
+                                            float f2 = (float)k2 + 0.5F;
+                                            if(world.a((double)f, (double)f1, (double)f2, 24.0D) == null) {
+                                                float f3 = f - (float)world.m;
+                                                float f4 = f1 - (float)world.n;
+                                                float f5 = f2 - (float)world.o;
+                                                float f6 = f3 * f3 + f4 * f4 + f5 * f5;
+                                                if(f6 >= 576.0F) {
+                                                    EntityLiving entityliving;
+                                                    try {
+                                                        entityliving = (EntityLiving)aclass[l1].getConstructor(new Class[]{World.class}).newInstance(new Object[]{world});
+                                                    } catch (Exception exception) {
+                                                        exception.printStackTrace();
+                                                        return i;
+                                                    }
+
+                                                    entityliving.c((double)f, (double)f1, (double)f2, world.m.nextFloat() * 360.0F, 0.0F);
+                                                    if(entityliving.a()) {
+                                                        ++j;
+                                                        world.a(entityliving);
+                                                        if(entityliving instanceof EntitySpider && world.m.nextInt(100) == 0) {
+                                                            EntitySkeleton entityskeleton = new EntitySkeleton(world);
+                                                            entityskeleton.c((double)f, (double)f1, (double)f2, entityliving.r, 0.0F);
+                                                            world.a(entityskeleton);
+                                                            entityskeleton.e(entityliving);
+                                                        }
+
+                                                        if(j >= entityliving.i()) {
+                                                            continue label90;
+                                                        }
+                                                    }
+
+                                                    i += j;
+                                                }
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
         }
-        if(l2 < entityliving.i()) goto _L7; else goto _L4
-_L7:
-        j += l2;
-        i4++;
-          goto _L8
-_L6:
-        i3++;
-          goto _L9
-        k++;
-          goto _L10
-_L2:
-        return j;
+        return i;
     }
 
 }
diff --git a/net/minecraft/server/ThreadCommandReader.java b/net/minecraft/server/ThreadCommandReader.java
index a1f4871..d21bee0 100644
--- a/net/minecraft/server/ThreadCommandReader.java
+++ b/net/minecraft/server/ThreadCommandReader.java
@@ -16,7 +16,7 @@ public class ThreadCommandReader extends Thread {
 
     public ThreadCommandReader(MinecraftServer minecraftserver) {
         a = minecraftserver;
-        super();
+        // super();
     }
 
     public void run() {
diff --git a/net/minecraft/server/ThreadLoginVerifier.java b/net/minecraft/server/ThreadLoginVerifier.java
index b0a6310..5dbcb1c 100644
--- a/net/minecraft/server/ThreadLoginVerifier.java
+++ b/net/minecraft/server/ThreadLoginVerifier.java
@@ -19,7 +19,7 @@ class ThreadLoginVerifier extends Thread {
     ThreadLoginVerifier(NetLoginHandler netloginhandler, Packet1Login packet1login) {
         b = netloginhandler;
         a = packet1login;
-        super();
+        // super();
     }
 
     public void run() {
diff --git a/net/minecraft/server/ThreadMonitorConnection.java b/net/minecraft/server/ThreadMonitorConnection.java
index 2785132..f4e7d58 100644
--- a/net/minecraft/server/ThreadMonitorConnection.java
+++ b/net/minecraft/server/ThreadMonitorConnection.java
@@ -15,7 +15,7 @@ class ThreadMonitorConnection extends Thread {
 
     ThreadMonitorConnection(NetworkManager networkmanager) {
         a = networkmanager;
-        super();
+        // super();
     }
 
     public void run() {
diff --git a/net/minecraft/server/ThreadServerApplication.java b/net/minecraft/server/ThreadServerApplication.java
index d5f4647..218d2f8 100644
--- a/net/minecraft/server/ThreadServerApplication.java
+++ b/net/minecraft/server/ThreadServerApplication.java
@@ -15,7 +15,7 @@ public final class ThreadServerApplication extends Thread {
 
     public ThreadServerApplication(String s, MinecraftServer minecraftserver) {
         a = minecraftserver;
-        super(s);
+        // super(s);
     }
 
     public void run() {
diff --git a/net/minecraft/server/ThreadSleepForever.java b/net/minecraft/server/ThreadSleepForever.java
index 5c89981..5625ba9 100644
--- a/net/minecraft/server/ThreadSleepForever.java
+++ b/net/minecraft/server/ThreadSleepForever.java
@@ -15,7 +15,7 @@ public class ThreadSleepForever extends Thread {
 
     public ThreadSleepForever(MinecraftServer minecraftserver) {
         a = minecraftserver;
-        super();
+        // super();
         setDaemon(true);
         start();
     }
